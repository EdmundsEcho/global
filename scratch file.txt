4m➜  global pwd
/Users/edmundcape/Dropbox/Programming/Haskell.drop/global
4m➜  global stack ghci
Run from outside a project, using implicit global project config
Using resolver: lts-5.0 from implicit global project's config file: /Users/edmun
dcape/.stack/global-project/stack.yaml                                         
Error parsing targets: The specified targets matched no packages.
Perhaps you need to run 'stack init'?
Warning: build failed, but optimistically launching GHCi anyway
Configuring GHCi with the following packages: 
GHCi, version 7.10.3: http://www.haskell.org/ghc/  :? for help
Ok, modules loaded: none.
Prelude
λ> :l quickcheck.hs 
[1 of 1] Compiling QC               ( quickcheck.hs, interpreted )
Ok, modules loaded: QC.
*QC
λ> sample arbitrary
()
()
()
()
()
()
()
()
()
()
()
*QC
λ> sample (arbitrary :: Gen Int)
0
2
4
-2
1
-7
6
10
-2
-3
7
*QC
λ> sample' arbitrary :: IO [Int]
[0,0,0,-1,-3,1,1,5,-5,-16,-16]
*QC
λ> 
*QC
λ> :t elements
elements :: [a] -> Gen a
*QC
λ> sample (elements [1..10])
6
3
5
5
9
6
2
5
5
8
2
*QC
λ> sample (elements [1,1,2])
1
1
1
1
1
2
2
1
1
2
1
*QC
λ> sample (elements ([] :: [Int]))
*** Exception: QuickCheck.elements used with empty list
*QC
λ>  
*QC
λ> :l quickcheck.hs 
[1 of 1] Compiling QC               ( quickcheck.hs, interpreted )
Ok, modules loaded: QC.
*QC
λ> gen
genTuple            generate            genericCoarbitrary  genericShrink
λ> genTuple 

<interactive>:13:1:
    No instance for (Show (Gen (a0, b0))) arising from a use of ‘print’
    In a stmt of an interactive GHCi command: print it
*QC
λ>  :l quickcheck.hs 
[1 of 1] Compiling QC               ( quickcheck.hs, interpreted )
Ok, modules loaded: QC.
*QC
λ> :r
Ok, modules loaded: QC.
*QC
λ> sample(genTuple arbitrary arbitrary :: Gen (Int,Char))

<interactive>:16:8:
    Couldn't match expected type ‘Gen a1 -> Gen a2 -> Gen (Int, Char)’
                with actual type ‘Gen (a0, b0)’
    The function ‘genTuple’ is applied to two arguments,
    but its type ‘Gen (a0, b0)’ has none
    In the first argument of ‘sample’, namely
      ‘(genTuple arbitrary arbitrary :: Gen (Int, Char))’
    In the expression:
      sample (genTuple arbitrary arbitrary :: Gen (Int, Char))
*QC
λ> sample(genTuple' arbitrary arbitrary :: Gen (Int,Char))
(0,'D')
(0,'-')
(1,'\FS')
(-5,'I')
(0,')')
(4,'\129')
(10,'i')
(7,'}')
(14,'\FS')
(-18,'\199')
(8,'\ACK')
*QC
λ> 
